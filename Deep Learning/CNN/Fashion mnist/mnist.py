# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fiXoxw9rytPRMpk3OgYodJtkynp390E8

**1. Import required Libraries**

**2. Get & pre-process data**

**3. Create model**

**4. compile model** 

**5. Train model**

**6. Evaluate model**

**7. Make predictions**

## 1. Import required Libraries
"""

import matplotlib.pyplot as plt
import tensorflow as tf
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense , Flatten , Dropout  # DNN
from keras.layers import Conv2D , MaxPool2D  #CNN
from tensorflow.keras.utils import plot_model

from keras import backend as k

"""## 2.Get & pre-process data"""

batch_size =128
num_classes = 10

from keras.datasets import mnist
(X_train , y_train ) ,(X_test , y_test) =mnist.load_data()

X_train.shape

if k.image_data_format()== 'channel_first' :
  X_train=X_train.reshape(X_train.shape[0] , 1 , 28 , 28)
  X_test=X_test.reshape(X_test.shape[0] , 1 , 28 , 28)
  input_shape=(1,28,28)

else: 
  X_train=X_train.reshape(X_train.shape[0] , 1 , 28 , 28)
  X_test=X_test.reshape(X_test.shape[0] , 1 , 28 , 28)
  input_shape=(1,28,28)

# reshape the dataset
X_train = X_train/255.0
X_test = X_test/255.0

class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
               "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

# Converts a class vector (integers) to binary class matrix.
y_train =tf.keras.utils.to_categorical(y_train , num_classes)
y_test = tf.keras.utils.to_categorical(y_test , num_classes)

"""## 3. Create model"""

model = Sequential()
model.add(Conv2D(filters=32 , kernel_size=(3,3),
                 activation ='relu' , 
                 input_shape=input_shape , 
                 data_format='channels_first'))

model.add(Conv2D(64 ,(3,3) ,activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2) ))

model.add(Flatten())
model.add(Dense(128 , activation='relu'))

model.add(Dense(10 , activation='softmax' , name='output'))

model.summary()

"""## 4. Compile model"""

model.compile(optimizer="adam",
              loss=keras.losses.categorical_crossentropy,
              metrics=['accuracy'])

"""## 5. Train model"""

model.fit(X_train, y_train , epochs =10 , 
          verbose=2 , batch_size =batch_size )

"""## 6. Evalute model"""

model.evaluate(X_test , y_test, verbose =2)

"""## 7. Save model"""

model.save("model.h5")
print("hi")

"""## 8. Make predictions"""

# #make a prediction for a new image
# from keras.preprocessing.image import load_img
# from keras.preprocessing.image import img_to_array
# from keras.models import load_model

# #load and prepare the image 
# def load_image(filename):
#   #load the image 
#   img =load_image(filename)
#   #convert to array
#   img = img_to_array(img)
#   #reshape into a single sample with 1 channel
#   img = img.reshape(1,28,28,1)
#   #prepare pixel data
#   img = img.astype("float32")
#   img = img/255.0
#   return img 


# # load an image and predict the class 
# def run_example():
#   # load the image 
#   img = load_image("/content/mm.png")
#   #load model 
#   model = load_model('/content/model.h5')
#   #predict the class 
#   result = model.predict_classes(img)
#   print(result[0])


# run_example()

